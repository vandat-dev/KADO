basePath: /v1
definitions:
  dto.AuthResponseDto:
    properties:
      refresh_token:
        type: string
      token:
        type: string
    type: object
  dto.ClientListResponseDto:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.ClientResponseDto'
        type: array
      total:
        type: integer
    type: object
  dto.ClientRequestDto:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.ClientResponseDto:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  dto.ClientUpdateRequestDto:
    properties:
      name:
        type: string
    type: object
  dto.CreateTaskDto:
    properties:
      client:
        type: string
      item:
        type: string
      job:
        type: string
      note:
        type: string
      ot:
        type: string
      role:
        type: string
      user_information:
        $ref: '#/definitions/model.UserInformation'
      volume:
        type: integer
    type: object
  dto.ItemListResponseDto:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.ItemResponseDto'
        type: array
      total:
        type: integer
    type: object
  dto.ItemRequestDto:
    properties:
      category:
        type: string
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  dto.ItemResponseDto:
    properties:
      category:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  dto.ItemUpdateRequestDto:
    properties:
      category:
        type: string
      description:
        type: string
      name:
        type: string
    type: object
  dto.JobListResponseDto:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.JobResponseDto'
        type: array
      total:
        type: integer
    type: object
  dto.JobRequestDto:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.JobResponseDto:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  dto.JobUpdateRequestDto:
    properties:
      name:
        type: string
    type: object
  dto.LoginRequestDto:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.MyTaskRequestDto:
    properties:
      client:
        type: string
      job:
        type: string
      limit:
        maximum: 100
        minimum: 0
        type: integer
      skip:
        minimum: 0
        type: integer
      status:
        enum:
        - OPEN
        - IN_PROGRESS
        - PENDING
        - COMPLETED
        type: string
    type: object
  dto.RegisterRequestDto:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      role:
        enum:
        - ADMIN
        - USER
        - SUPER_ADMIN
        type: string
      username:
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  dto.RoleListResponseDto:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.RoleResponseDto'
        type: array
      total:
        type: integer
    type: object
  dto.RoleRequestDto:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.RoleResponseDto:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  dto.RoleUpdateRequestDto:
    properties:
      name:
        type: string
    type: object
  dto.TaskListResponseDto:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.TaskResponseDto'
        type: array
      total:
        type: integer
    type: object
  dto.TaskProcessDto:
    properties:
      status:
        enum:
        - OPEN
        - IN_PROGRESS
        - PENDING
        - COMPLETED
        type: string
      work_time:
        type: integer
    type: object
  dto.TaskResponseDto:
    properties:
      client:
        type: string
      created_at:
        type: string
      custom_created_at:
        type: string
      delivery:
        type: boolean
      ended_at:
        type: string
      id:
        type: integer
      item:
        type: string
      job:
        type: string
      note:
        type: string
      ot:
        type: string
      role:
        type: string
      started_at:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
      user_information:
        $ref: '#/definitions/model.UserInformation'
      volume:
        type: integer
      work_time:
        type: integer
    type: object
  dto.UpdateTaskDto:
    properties:
      client:
        type: string
      custom_created_at:
        type: string
      ended_at:
        type: string
      item:
        type: string
      job:
        type: string
      minute:
        type: integer
      note:
        type: string
      ot:
        type: string
      role:
        type: string
      started_at:
        type: string
      status:
        enum:
        - OPEN
        - IN_PROGRESS
        - PENDING
        - COMPLETED
        type: string
      user_information:
        $ref: '#/definitions/model.UserInformation'
      volume:
        type: integer
      work_time:
        type: integer
    type: object
  dto.UserListResponseDto:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.UserResponseDto'
        type: array
      total:
        type: integer
    type: object
  dto.UserRequestDto:
    properties:
      address:
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        type: string
      password:
        minLength: 6
        type: string
      phone_number:
        type: string
      system_role:
        enum:
        - ADMIN
        - USER
        - SUPER_ADMIN
        type: string
      username:
        type: string
    required:
    - email
    - password
    - system_role
    - username
    type: object
  dto.UserResponseDto:
    properties:
      address:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      phone_number:
        type: string
      system_role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  dto.UserUpdateRequestDto:
    properties:
      address:
        type: string
      full_name:
        type: string
      gender:
        type: string
      is_active:
        type: boolean
      password:
        minLength: 6
        type: string
      phone_number:
        type: string
      system_role:
        enum:
        - ADMIN
        - USER
        - SUPER_ADMIN
        type: string
      username:
        type: string
    type: object
  model.UserInformation:
    properties:
      avatar:
        type: string
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  response.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
info:
  contact:
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Go API server.
  termsOfService: http://swagger.io/terms/
  title: Go API
  version: "1.0"
paths:
  /client/create:
    post:
      consumes:
      - application/json
      description: Create a new client
      parameters:
      - description: Client data
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/dto.ClientRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Client created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ClientResponseDto'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new client
      tags:
      - clients
  /client/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete client by ID
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Client deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Client not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete client
      tags:
      - clients
  /client/detail/{id}:
    get:
      consumes:
      - application/json
      description: Get client details by ID
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Client details
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ClientResponseDto'
              type: object
        "422":
          description: Client not found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get client by ID
      tags:
      - clients
  /client/list:
    get:
      consumes:
      - application/json
      description: Get paginated list of clients with optional filtering
      parameters:
      - default: 0
        description: Number of records to skip
        in: query
        name: skip
        type: integer
      - default: 10
        description: Number of records to return
        in: query
        name: limit
        type: integer
      - description: Filter by client name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of clients
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ClientListResponseDto'
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get list of clients
      tags:
      - clients
  /client/update/{id}:
    put:
      consumes:
      - application/json
      description: Update client by ID
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      - description: Client update data
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/dto.ClientUpdateRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Client updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ClientResponseDto'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Client not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update client
      tags:
      - clients
  /item/create:
    post:
      consumes:
      - application/json
      description: Create a new item
      parameters:
      - description: Item data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/dto.ItemRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Item created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ItemResponseDto'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new item
      tags:
      - items
  /item/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete item by ID
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Item deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Item not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete item
      tags:
      - items
  /item/detail/{id}:
    get:
      consumes:
      - application/json
      description: Get item details by ID
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Item details
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ItemResponseDto'
              type: object
        "422":
          description: Item not found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get item by ID
      tags:
      - items
  /item/list:
    get:
      consumes:
      - application/json
      description: Get paginated list of items with optional filtering
      parameters:
      - default: 0
        description: Number of records to skip
        in: query
        name: skip
        type: integer
      - default: 10
        description: Number of records to return
        in: query
        name: limit
        type: integer
      - description: Filter by item name
        in: query
        name: name
        type: string
      - description: Filter by item category
        in: query
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of items
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ItemListResponseDto'
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get list of items
      tags:
      - items
  /item/update/{id}:
    put:
      consumes:
      - application/json
      description: Update item by ID
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Item update data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/dto.ItemUpdateRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Item updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ItemResponseDto'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Item not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update item
      tags:
      - items
  /job/create:
    post:
      consumes:
      - application/json
      description: Create a new job
      parameters:
      - description: Job data
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/dto.JobRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Job created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.JobResponseDto'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new job
      tags:
      - jobs
  /job/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete job by ID
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Job deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Job not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete job
      tags:
      - jobs
  /job/detail/{id}:
    get:
      consumes:
      - application/json
      description: Get job details by ID
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Job details
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.JobResponseDto'
              type: object
        "422":
          description: Job not found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get job by ID
      tags:
      - jobs
  /job/list:
    get:
      consumes:
      - application/json
      description: Get paginated list of jobs with optional filtering
      parameters:
      - default: 0
        description: Number of records to skip
        in: query
        name: skip
        type: integer
      - default: 10
        description: Number of records to return
        in: query
        name: limit
        type: integer
      - description: Filter by job name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of jobs
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.JobListResponseDto'
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get list of jobs
      tags:
      - jobs
  /job/update/{id}:
    put:
      consumes:
      - application/json
      description: Update job by ID
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      - description: Job update data
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/dto.JobUpdateRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Job updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.JobResponseDto'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Job not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update job
      tags:
      - jobs
  /role/create:
    post:
      consumes:
      - application/json
      description: Create a new role
      parameters:
      - description: Role data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dto.RoleRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Role created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoleResponseDto'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new role
      tags:
      - roles
  /role/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete role by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Role not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete role
      tags:
      - roles
  /role/detail/{id}:
    get:
      consumes:
      - application/json
      description: Get role details by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role details
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoleResponseDto'
              type: object
        "422":
          description: Role not found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get role by ID
      tags:
      - roles
  /role/list:
    get:
      consumes:
      - application/json
      description: Get paginated list of roles with optional filtering
      parameters:
      - default: 0
        description: Number of records to skip
        in: query
        name: skip
        type: integer
      - default: 10
        description: Number of records to return
        in: query
        name: limit
        type: integer
      - description: Filter by role name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of roles
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoleListResponseDto'
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get list of roles
      tags:
      - roles
  /role/update/{id}:
    put:
      consumes:
      - application/json
      description: Update role by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role update data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dto.RoleUpdateRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Role updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoleResponseDto'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Role not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update role
      tags:
      - roles
  /task/create:
    post:
      consumes:
      - application/json
      description: Create a new task with the provided information
      parameters:
      - description: Create Task Request
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTaskDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: integer
                  type: object
              type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "405":
          description: Method not allowed
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new task
      tags:
      - task
  /task/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete task by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Invalid task ID
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a task
      tags:
      - task
  /task/detail/{id}:
    get:
      consumes:
      - application/json
      description: Get task details by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.TaskResponseDto'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Invalid task ID
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get task by ID
      tags:
      - task
  /task/list:
    get:
      consumes:
      - application/json
      description: Get paginated list of tasks with filtering options. Only admin
        users can access this endpoint without user filter.
      parameters:
      - default: 0
        description: Skip
        in: query
        name: skip
        type: integer
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - description: Client filter
        in: query
        name: client
        type: string
      - description: Job filter
        in: query
        name: job
        type: string
      - description: Status filter
        enum:
        - OPEN
        - IN_PROGRESS
        - PENDING
        - COMPLETED
        in: query
        name: status
        type: string
      - description: User ID filter
        in: query
        name: user_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of tasks
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.TaskListResponseDto'
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: 'Access denied: Only admin can view all tasks'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get list of tasks with pagination and filtering
      tags:
      - task
  /task/my-tasks:
    get:
      consumes:
      - application/json
      description: Get tasks belonging to the authenticated user
      parameters:
      - default: 0
        description: Skip
        in: query
        name: skip
        type: integer
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - description: Client filter
        in: query
        name: client
        type: string
      - description: Job filter
        in: query
        name: job
        type: string
      - description: Status filter
        enum:
        - OPEN
        - IN_PROGRESS
        - PENDING
        - COMPLETED
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of my tasks
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.MyTaskRequestDto'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get current user's tasks
      tags:
      - task
  /task/update/{id}:
    put:
      consumes:
      - application/json
      description: Update task information by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Task Request
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateTaskDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.TaskResponseDto'
              type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Invalid task ID
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a task
      tags:
      - task
  /task/update_progress/{id}:
    put:
      consumes:
      - application/json
      description: Update task progress (work time and status) by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Task Progress Request
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/dto.TaskProcessDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.TaskResponseDto'
              type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Invalid task ID
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update task progress
      tags:
      - task
  /user/create_user:
    post:
      consumes:
      - application/json
      description: Creates a new user with the provided information
      parameters:
      - description: User Information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "405":
          description: User already exists
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new user
      tags:
      - user
  /user/get_user/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponseDto'
              type: object
        "422":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get user by ID
      tags:
      - user
  /user/list_user:
    get:
      consumes:
      - application/json
      description: Returns a paginated list of users with filtering options. Only
        admin users can access this endpoint.
      parameters:
      - default: 0
        description: Skip
        in: query
        name: skip
        type: integer
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - description: Email
        in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of users
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserListResponseDto'
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: 'Access denied: Only admin can view user list'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get all users (Admin only)
      tags:
      - user
  /user/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User Login Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.AuthResponseDto'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login user
      tags:
      - auth
  /user/me:
    get:
      consumes:
      - application/json
      description: Get the currently log in user's information
      produces:
      - application/json
      responses:
        "200":
          description: Current user
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponseDto'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get current user
      tags:
      - user
  /user/register:
    post:
      consumes:
      - application/json
      description: Register a new user and return JWT token
      parameters:
      - description: User Registration Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Registration successful
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.AuthResponseDto'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: User already exists
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register a new user
      tags:
      - auth
  /user/update_user/{id}:
    put:
      consumes:
      - application/json
      description: Updates user information by user ID (email cannot be updated)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Update Data (username, password, role only)
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponseDto'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update user by ID
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    description: 'JWT Authorization header using Bearer scheme. Example: "Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
