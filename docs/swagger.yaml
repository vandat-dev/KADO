basePath: /v1
definitions:
  dto.AuthResponseDto:
    properties:
      refresh_token:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponseDto'
    type: object
  dto.LoginRequestDto:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.ProductDetailDto:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  dto.ProductRequestDto:
    properties:
      description:
        type: string
      name:
        type: string
      userID:
        type: integer
    required:
    - name
    type: object
  dto.ProductResponseDto:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponseDto'
      user_id:
        type: integer
    type: object
  dto.RegisterRequestDto:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      role:
        enum:
        - ADMIN
        - USER
        type: string
      username:
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  dto.UserListResponseDto:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.UserResponseDto'
        type: array
      total:
        type: integer
    type: object
  dto.UserRequestDto:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  dto.UserResponseDto:
    properties:
      email:
        type: string
      id:
        type: integer
      role:
        type: string
      username:
        type: string
    required:
    - id
    type: object
  dto.UserUpdateRequestDto:
    properties:
      password:
        minLength: 6
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  response.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
host: localhost:8386
info:
  contact:
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Go API server.
  termsOfService: http://swagger.io/terms/
  title: Go API
  version: "1.0"
paths:
  /product/create:
    post:
      consumes:
      - application/json
      description: Create a new product with name, description, and user ID
      parameters:
      - description: Product Request
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: integer
                  type: object
              type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "405":
          description: Method not allowed
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new product
      tags:
      - product
  /product/detail/{id}:
    get:
      consumes:
      - application/json
      description: Get product details by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductDetailDto'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get product by ID
      tags:
      - product
  /product/list:
    get:
      consumes:
      - application/json
      description: Get all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.ProductResponseDto'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get list of products
      tags:
      - product
  /user/create_user:
    post:
      consumes:
      - application/json
      description: Creates a new user with the provided information
      parameters:
      - description: User Information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "405":
          description: User already exists
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new user
      tags:
      - user
  /user/get_user/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponseDto'
              type: object
        "422":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get user by ID
      tags:
      - user
  /user/list_user:
    get:
      consumes:
      - application/json
      description: Returns a paginated list of users with filtering options. Only
        admin users can access this endpoint.
      parameters:
      - default: 0
        description: Skip
        in: query
        name: skip
        type: integer
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - description: Email
        in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of users
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserListResponseDto'
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: 'Access denied: Only admin can view user list'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get all users (Admin only)
      tags:
      - user
  /user/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User Login Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.AuthResponseDto'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login user
      tags:
      - auth
  /user/me:
    get:
      consumes:
      - application/json
      description: Get the currently log in user's information
      produces:
      - application/json
      responses:
        "200":
          description: Current user
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponseDto'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get current user
      tags:
      - user
  /user/register:
    post:
      consumes:
      - application/json
      description: Register a new user and return JWT token
      parameters:
      - description: User Registration Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Registration successful
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.AuthResponseDto'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: User already exists
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register a new user
      tags:
      - auth
  /user/update_user/{id}:
    put:
      consumes:
      - application/json
      description: Updates user information by user ID (email cannot be updated)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Update Data (username, password, role only)
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponseDto'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update user by ID
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    description: 'JWT Authorization header using Bearer scheme. Example: "Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
