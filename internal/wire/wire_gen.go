// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"base_go_be/internal/controller"
	"base_go_be/internal/repo"
	"base_go_be/internal/service"
)

// Injectors from client.wire.go:

func InitClientRouterHandler() (*controller.ClientController, error) {
	iClientRepository := repo.NewClientRepository()
	iClientService := service.NewClientService(iClientRepository)
	clientController := controller.NewClientController(iClientService)
	return clientController, nil
}

// Injectors from item.wire.go:

func InitItemRouterHandler() (*controller.ItemController, error) {
	iItemRepository := repo.NewItemRepository()
	iItemService := service.NewItemService(iItemRepository)
	itemController := controller.NewItemController(iItemService)
	return itemController, nil
}

// Injectors from job.wire.go:

func InitJobRouterHandler() (*controller.JobController, error) {
	iJobRepository := repo.NewJobRepository()
	iJobService := service.NewJobService(iJobRepository)
	jobController := controller.NewJobController(iJobService)
	return jobController, nil
}

// Injectors from role.wire.go:

func InitRoleRouterHandler() (*controller.RoleController, error) {
	iRoleRepository := repo.NewRoleRepository()
	iRoleService := service.NewRoleService(iRoleRepository)
	roleController := controller.NewRoleController(iRoleService)
	return roleController, nil
}

// Injectors from task.wire.go:

func InitTaskRouterHandler() (*controller.TaskController, error) {
	iTaskRepository := repo.NewTaskRepository()
	iTaskService := service.NewTaskService(iTaskRepository)
	taskController := controller.NewTaskController(iTaskService)
	return taskController, nil
}

// Injectors from user.wire.go:

func InitUserRouterHandler() (*controller.UserController, error) {
	iUserRepository := repo.NewUserRepository()
	iUserService := service.NewUserService(iUserRepository)
	userController := controller.NewUserController(iUserService)
	return userController, nil
}
